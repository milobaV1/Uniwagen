/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as userIndexImport } from './routes/(user)/index'
import { Route as userLayoutImport } from './routes/(user)/_layout'
import { Route as userAuthenticatedImport } from './routes/(user)/_authenticated'
import { Route as userLayoutauthSignUpImport } from './routes/(user)/_layout/(auth)/sign-up'
import { Route as userLayoutauthLoginImport } from './routes/(user)/_layout/(auth)/login'
import { Route as userAuthenticatedhomeLayoutImport } from './routes/(user)/_authenticated/(home)/_layout'
import { Route as userAuthenticatedhomeLayoutHomeImport } from './routes/(user)/_authenticated/(home)/_layout/home'

// Create Virtual Routes

const userImport = createFileRoute('/(user)')()
const userAuthenticatedhomeImport = createFileRoute(
  '/(user)/_authenticated/(home)',
)()

// Create/Update Routes

const userRoute = userImport.update({
  id: '/(user)',
  getParentRoute: () => rootRoute,
} as any)

const userIndexRoute = userIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => userRoute,
} as any)

const userLayoutRoute = userLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => userRoute,
} as any)

const userAuthenticatedRoute = userAuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => userRoute,
} as any)

const userAuthenticatedhomeRoute = userAuthenticatedhomeImport.update({
  id: '/(home)',
  getParentRoute: () => userAuthenticatedRoute,
} as any)

const userLayoutauthSignUpRoute = userLayoutauthSignUpImport.update({
  id: '/(auth)/sign-up',
  path: '/sign-up',
  getParentRoute: () => userLayoutRoute,
} as any)

const userLayoutauthLoginRoute = userLayoutauthLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => userLayoutRoute,
} as any)

const userAuthenticatedhomeLayoutRoute =
  userAuthenticatedhomeLayoutImport.update({
    id: '/_layout',
    getParentRoute: () => userAuthenticatedhomeRoute,
  } as any)

const userAuthenticatedhomeLayoutHomeRoute =
  userAuthenticatedhomeLayoutHomeImport.update({
    id: '/home',
    path: '/home',
    getParentRoute: () => userAuthenticatedhomeLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(user)': {
      id: '/(user)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userImport
      parentRoute: typeof rootRoute
    }
    '/(user)/_authenticated': {
      id: '/(user)/_authenticated'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userAuthenticatedImport
      parentRoute: typeof userRoute
    }
    '/(user)/_layout': {
      id: '/(user)/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof userLayoutImport
      parentRoute: typeof userImport
    }
    '/(user)/': {
      id: '/(user)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userIndexImport
      parentRoute: typeof userImport
    }
    '/(user)/_authenticated/(home)': {
      id: '/(user)/_authenticated/(home)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userAuthenticatedhomeImport
      parentRoute: typeof userAuthenticatedImport
    }
    '/(user)/_authenticated/(home)/_layout': {
      id: '/(user)/_authenticated/(home)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userAuthenticatedhomeLayoutImport
      parentRoute: typeof userAuthenticatedhomeRoute
    }
    '/(user)/_layout/(auth)/login': {
      id: '/(user)/_layout/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof userLayoutauthLoginImport
      parentRoute: typeof userLayoutImport
    }
    '/(user)/_layout/(auth)/sign-up': {
      id: '/(user)/_layout/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof userLayoutauthSignUpImport
      parentRoute: typeof userLayoutImport
    }
    '/(user)/_authenticated/(home)/_layout/home': {
      id: '/(user)/_authenticated/(home)/_layout/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof userAuthenticatedhomeLayoutHomeImport
      parentRoute: typeof userAuthenticatedhomeLayoutImport
    }
  }
}

// Create and export the route tree

interface userAuthenticatedhomeLayoutRouteChildren {
  userAuthenticatedhomeLayoutHomeRoute: typeof userAuthenticatedhomeLayoutHomeRoute
}

const userAuthenticatedhomeLayoutRouteChildren: userAuthenticatedhomeLayoutRouteChildren =
  {
    userAuthenticatedhomeLayoutHomeRoute: userAuthenticatedhomeLayoutHomeRoute,
  }

const userAuthenticatedhomeLayoutRouteWithChildren =
  userAuthenticatedhomeLayoutRoute._addFileChildren(
    userAuthenticatedhomeLayoutRouteChildren,
  )

interface userAuthenticatedhomeRouteChildren {
  userAuthenticatedhomeLayoutRoute: typeof userAuthenticatedhomeLayoutRouteWithChildren
}

const userAuthenticatedhomeRouteChildren: userAuthenticatedhomeRouteChildren = {
  userAuthenticatedhomeLayoutRoute:
    userAuthenticatedhomeLayoutRouteWithChildren,
}

const userAuthenticatedhomeRouteWithChildren =
  userAuthenticatedhomeRoute._addFileChildren(
    userAuthenticatedhomeRouteChildren,
  )

interface userAuthenticatedRouteChildren {
  userAuthenticatedhomeRoute: typeof userAuthenticatedhomeRouteWithChildren
}

const userAuthenticatedRouteChildren: userAuthenticatedRouteChildren = {
  userAuthenticatedhomeRoute: userAuthenticatedhomeRouteWithChildren,
}

const userAuthenticatedRouteWithChildren =
  userAuthenticatedRoute._addFileChildren(userAuthenticatedRouteChildren)

interface userLayoutRouteChildren {
  userLayoutauthLoginRoute: typeof userLayoutauthLoginRoute
  userLayoutauthSignUpRoute: typeof userLayoutauthSignUpRoute
}

const userLayoutRouteChildren: userLayoutRouteChildren = {
  userLayoutauthLoginRoute: userLayoutauthLoginRoute,
  userLayoutauthSignUpRoute: userLayoutauthSignUpRoute,
}

const userLayoutRouteWithChildren = userLayoutRoute._addFileChildren(
  userLayoutRouteChildren,
)

interface userRouteChildren {
  userAuthenticatedRoute: typeof userAuthenticatedRouteWithChildren
  userLayoutRoute: typeof userLayoutRouteWithChildren
  userIndexRoute: typeof userIndexRoute
}

const userRouteChildren: userRouteChildren = {
  userAuthenticatedRoute: userAuthenticatedRouteWithChildren,
  userLayoutRoute: userLayoutRouteWithChildren,
  userIndexRoute: userIndexRoute,
}

const userRouteWithChildren = userRoute._addFileChildren(userRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof userAuthenticatedhomeLayoutRouteWithChildren
  '': typeof userLayoutRouteWithChildren
  '/login': typeof userLayoutauthLoginRoute
  '/sign-up': typeof userLayoutauthSignUpRoute
  '/home': typeof userAuthenticatedhomeLayoutHomeRoute
}

export interface FileRoutesByTo {
  '': typeof userLayoutRouteWithChildren
  '/': typeof userAuthenticatedhomeLayoutRouteWithChildren
  '/login': typeof userLayoutauthLoginRoute
  '/sign-up': typeof userLayoutauthSignUpRoute
  '/home': typeof userAuthenticatedhomeLayoutHomeRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(user)': typeof userRouteWithChildren
  '/(user)/_authenticated': typeof userAuthenticatedRouteWithChildren
  '/(user)/_layout': typeof userLayoutRouteWithChildren
  '/(user)/': typeof userIndexRoute
  '/(user)/_authenticated/(home)': typeof userAuthenticatedhomeRouteWithChildren
  '/(user)/_authenticated/(home)/_layout': typeof userAuthenticatedhomeLayoutRouteWithChildren
  '/(user)/_layout/(auth)/login': typeof userLayoutauthLoginRoute
  '/(user)/_layout/(auth)/sign-up': typeof userLayoutauthSignUpRoute
  '/(user)/_authenticated/(home)/_layout/home': typeof userAuthenticatedhomeLayoutHomeRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/login' | '/sign-up' | '/home'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/' | '/login' | '/sign-up' | '/home'
  id:
    | '__root__'
    | '/(user)'
    | '/(user)/_authenticated'
    | '/(user)/_layout'
    | '/(user)/'
    | '/(user)/_authenticated/(home)'
    | '/(user)/_authenticated/(home)/_layout'
    | '/(user)/_layout/(auth)/login'
    | '/(user)/_layout/(auth)/sign-up'
    | '/(user)/_authenticated/(home)/_layout/home'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  userRoute: typeof userRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  userRoute: userRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(user)"
      ]
    },
    "/(user)": {
      "filePath": "(user)",
      "children": [
        "/(user)/_authenticated",
        "/(user)/_layout",
        "/(user)/"
      ]
    },
    "/(user)/_authenticated": {
      "filePath": "(user)/_authenticated.tsx",
      "parent": "/(user)",
      "children": [
        "/(user)/_authenticated/(home)"
      ]
    },
    "/(user)/_layout": {
      "filePath": "(user)/_layout.tsx",
      "parent": "/(user)",
      "children": [
        "/(user)/_layout/(auth)/login",
        "/(user)/_layout/(auth)/sign-up"
      ]
    },
    "/(user)/": {
      "filePath": "(user)/index.tsx",
      "parent": "/(user)"
    },
    "/(user)/_authenticated/(home)": {
      "filePath": "(user)/_authenticated/(home)",
      "parent": "/(user)/_authenticated",
      "children": [
        "/(user)/_authenticated/(home)/_layout"
      ]
    },
    "/(user)/_authenticated/(home)/_layout": {
      "filePath": "(user)/_authenticated/(home)/_layout.tsx",
      "parent": "/(user)/_authenticated/(home)",
      "children": [
        "/(user)/_authenticated/(home)/_layout/home"
      ]
    },
    "/(user)/_layout/(auth)/login": {
      "filePath": "(user)/_layout/(auth)/login.tsx",
      "parent": "/(user)/_layout"
    },
    "/(user)/_layout/(auth)/sign-up": {
      "filePath": "(user)/_layout/(auth)/sign-up.tsx",
      "parent": "/(user)/_layout"
    },
    "/(user)/_authenticated/(home)/_layout/home": {
      "filePath": "(user)/_authenticated/(home)/_layout/home.tsx",
      "parent": "/(user)/_authenticated/(home)/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
